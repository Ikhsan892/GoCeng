// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type EnumStatus string

const (
	EnumStatusUNPAID     EnumStatus = "UNPAID"
	EnumStatusPAID       EnumStatus = "PAID"
	EnumStatusPROCESSING EnumStatus = "PROCESSING"
	EnumStatusSHIPPING   EnumStatus = "SHIPPING"
	EnumStatusDONE       EnumStatus = "DONE"
	EnumStatusRETURN     EnumStatus = "RETURN"
	EnumStatusREFUND     EnumStatus = "REFUND"
	EnumStatusCANCELLED  EnumStatus = "CANCELLED"
	EnumStatusFRAUD      EnumStatus = "FRAUD"
)

func (e *EnumStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumStatus(s)
	case string:
		*e = EnumStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumStatus: %T", src)
	}
	return nil
}

type NullEnumStatus struct {
	EnumStatus EnumStatus
	Valid      bool // Valid is true if EnumStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EnumStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnumStatus), nil
}

type Order struct {
	ID            int64
	OrderID       string
	UserID        int64
	PaymentType   string
	Shipping3pl   string
	Shipping3plID int64
	TotalPrice    pgtype.Numeric
	Awb           pgtype.Text
	Status        NullEnumStatus
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
	DeletedAt     pgtype.Timestamp
}

type PaymentType struct {
	ID   int64
	Name string
}

type Product struct {
	ID    int64
	Name  string
	Price pgtype.Numeric
	Stock pgtype.Int4
}

type Shipping3pl struct {
	ID   int64
	Name string
}

type User struct {
	ID       int64
	Username string
	Password string
	Email    string
	Address  []byte
}
