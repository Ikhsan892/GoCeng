// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO users(username,password,email,address) VALUES ($1,$2,$3,$4)
`

type CreateCustomerParams struct {
	Username string
	Password string
	Email    string
	Address  []byte
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.Exec(ctx, createCustomer,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.Address,
	)
	return err
}

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products(name,price,stock) VALUES ($1,$2::float8,$3::int)
`

type CreateProductParams struct {
	Name    string
	Column2 float64
	Column3 int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct, arg.Name, arg.Column2, arg.Column3)
	return err
}

const getById = `-- name: GetById :one
SELECT id, username, password, email, address FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.Address,
	)
	return i, err
}

const getProductsByIds = `-- name: GetProductsByIds :many
SELECT id,name,price::float4,stock::bigint FROM products WHERE id = ANY($1::int[])
`

type GetProductsByIdsRow struct {
	ID    int64
	Name  string
	Price float32
	Stock int64
}

func (q *Queries) GetProductsByIds(ctx context.Context, dollar_1 []int32) ([]GetProductsByIdsRow, error) {
	rows, err := q.db.Query(ctx, getProductsByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByIdsRow
	for rows.Next() {
		var i GetProductsByIdsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Stock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
